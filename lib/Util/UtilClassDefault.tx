#-------------------------------------------------------------------------------------------------------------------
# h: <: $_class_pkg_ :>
#-------------------------------------------------------------------------------------------------------------------
# NAME................... <: $_class_name_ :>
# CREATION DATE.......... ?????
# AUTHOR................. ?????
#-------------------------------------------------------------------------------------------------------------------
# CHANGE HISTORY
#-------------------------------------------------------------------------------------------------------------------
package <: $_class_pkg_ :>;
use Moo;
use utf8;

extends 'lib::Utils::BaseObjectMoo';
#-------------------------------------------------------------------------------------------------------------------
# pkg system
#-------------------------------------------------------------------------------------------------------------------
with 'MooX::Singleton';
use Types::Standard;
use File::Basename;
use Data::Dumper;
use FindBin;
use lib "$FindBin::Bin/";

#-------------------------------------------------------------------------------------------------------------------
# pkg local
#-------------------------------------------------------------------------------------------------------------------



#-------------------------------------------------------------------------------------------------------------------
# attributes
#-------------------------------------------------------------------------------------------------------------------
has pkg_name     => ( is => 'rw', lazy => 1, default => __PACKAGE__,         isa => Str,                          );
has base_name    => ( is => 'rw', lazy => 1, default => __FILE__,            isa => Str,                          );
has config       => ( is => 'rw', lazy => 1, default => sub{ {} },           isa => HashRef,                      );
has local_config => ( is => 'rw', lazy => 1, default => '',                  isa => Str                           );
has pkg_str      => ( is => 'rw', lazy => 1, builder => '_build_pkg_str', isa => InstanceOf['lib::Utils::String'] );
: for $_list_attributes_.keys() -> $key {
has <: $_list_attributes_[$key].name :> => (  is => 'rw', lazy => 1, default => <: $_list_attributes_[$key].init :>, isa => <: $_list_attributes_[$key].type :> );
: } 

#----------------------------------------------------------------------------------------------------------
# attributes init values
#----------------------------------------------------------------------------------------------------------
sub _build_pkg_str   { return lib::Utils::String->new or die "Exception: Require lib::Util::String";      }


#-------------------------------------------------------------------------------------------------------------------
# f* builder
#---
sub BUILD {
  my $self = shift;
  $self->pkg_name( __PACKAGE__ );
  $self->base_name( __FILE__ );
  $self->local_config ( substr ( $self->base_name, 0, -3).'.yaml' || '' );
  $self->config ( $self->load_config_yaml( $self->local_config )  ) if ( -r $self->local_config );
  binmode STDOUT, ':utf8';
}



#--------------------------------------------------------------------------------------------------------------------
# f* demolish:
#---
sub demolish  {
  my $self = shift;
  foreach (values %$self) { $_->DESTROY if ref $_ eq __PACKAGE__; }
  %$self = ();
}

# end package
#--------------------------------------------------------------------------------------------------------------------
1;



